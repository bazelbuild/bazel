// Copyright 2025 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package com.google.devtools.build.lib.util.regex;

import static com.google.devtools.build.lib.util.StringEncoding.unicodeToInternal;

import com.code_intelligence.jazzer.api.FuzzedDataProvider;
import java.util.function.Predicate;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

/**
 * A fuzz test that checks that the optimized regex matcher generated by {@link
 * RegexUtil#asOptimizedMatchingPredicate} behaves just like the original regex matcher.
 */
public class RegexUtilFuzzTest {
  public static void fuzzerTestOneInput(FuzzedDataProvider data) {
    String needle = data.consumeString(30);
    String haystack = data.consumeRemainingAsString();
    Pattern originalPattern;
    try {
      originalPattern = Pattern.compile(needle, Pattern.DOTALL);
    } catch (PatternSyntaxException e) {
      // The fuzzer generated an invalid regex, skip it.
      return;
    }

    Predicate<String> optimizedMatcher = RegexUtil.asOptimizedMatchingPredicate(originalPattern);
    boolean originalMatches = originalPattern.matcher(haystack).matches();
    boolean optimizedMatches = optimizedMatcher.test(unicodeToInternal(haystack));
    if (originalMatches != optimizedMatches) {
      throw new AssertionError(
"""
Optimized matcher and original matcher differ in behavior:
needle: '%s'
haystack: '%s'
originalPattern.matcher(haystack).matches(): %s
optimizedMatcher.test(haystack): %s
"""
              .formatted(needle, haystack, originalMatches, optimizedMatches));
    }
  }
}
